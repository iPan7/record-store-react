{"version":3,"sources":["components/Footer.js","components/Header.js","api/index.js","components/RecordsForm.js","components/RecordsTable/EditableText.js","components/RecordsTable/index.js","pages/Records.js","App.js","index.js"],"names":["Footer","className","fontSize","Date","getFullYear","Header","as","baseUrl","api","index","ky","get","json","id","delete","create","payload","post","update","put","RecordsForm","handler","onSubmit","isRequired","placeholder","name","colorScheme","type","EditableText","value","recordKey","defaultValue","size","data-key","data-id","onChange","onBlur","RecordsTable","records","updateRecord","useMutation","deleteRecord","queryClient","useQueryClient","handleUpdate","event","updatedRecord","find","Number","target","dataset","key","mutate","handleDelete","console","log","onSuccess","a","invalidateQueries","variant","map","artist","album","year","leftIcon","Delete","onClick","fetchRecords","Records","useQuery","status","data","error","addRecord","color","message","preventDefault","Object","fromEntries","FormData","QueryClient","App","theme","QueryClientProvider","client","initialIsOpen","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e69fba66.chunk.js","sourcesContent":["import { Text } from '@chakra-ui/react';\n\nfunction Footer() {\n  return (\n    <footer className=\"container mx-auto py-2\">\n      <Text fontSize=\"xs\">{new Date().getFullYear()} Records</Text>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import { Heading } from '@chakra-ui/react';\n\nfunction Header() {\n  return (\n    <header className=\"container mx-auto\">\n      <Heading as=\"h1\">Records</Heading>\n    </header>\n  );\n}\n\nexport default Header;\n","import ky from 'ky';\n\nconst baseUrl = 'http://localhost:8080/records';\n\nconst api = {\n  index() {\n    return ky.get(baseUrl).json();\n  },\n\n  get(id) {\n    return ky.get(`${baseUrl}/${id}`).json();\n  },\n\n  delete(id) {\n    return ky.delete(`${baseUrl}/${id}`);\n  },\n\n  create(payload) {\n    return ky.post(baseUrl, { json: payload }).json();\n  },\n\n  update(payload, id) {\n    return ky.put(`${baseUrl}/${id}`, { json: payload });\n  },\n};\n\nexport default api;\n","import { Button, FormControl, FormLabel, Input } from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\n\nfunction RecordsForm({ handler }) {\n  return (\n    <form className=\"flex flex-col gap-4 mb-4\" onSubmit={handler}>\n      <FormControl id=\"artist\" isRequired>\n        <FormLabel>Artist</FormLabel>\n        <Input placeholder=\"artist\" name=\"artist\" />\n      </FormControl>\n      <FormControl id=\"album\" isRequired>\n        <FormLabel>Album</FormLabel>\n        <Input placeholder=\"Album\" name=\"album\" />\n      </FormControl>\n      <FormControl id=\"year\" isRequired>\n        <FormLabel>Year</FormLabel>\n        <Input placeholder=\"year\" name=\"year\" />\n      </FormControl>\n\n      <Button colorScheme=\"green\" type=\"submit\" className=\"max-w-xs\">\n        Add Record\n      </Button>\n    </form>\n  );\n}\n\nRecordsForm.propTypes = {\n  handler: PropTypes.func.isRequired,\n};\n\nexport default RecordsForm;\n","import { Editable, EditableInput, EditablePreview } from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\n\nfunction EditableText({ value, recordKey, id, handler }) {\n  return (\n    <Editable\n      defaultValue={value}\n      className=\"flex gap-2 items-center text-purple-600\"\n    >\n      <EditablePreview />\n      <EditableInput\n        size=\"xs\"\n        data-key={recordKey}\n        data-id={id}\n        onChange={handler}\n        onBlur={handler}\n      />\n    </Editable>\n  );\n}\n\nEditableText.propTypes = {\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  handler: PropTypes.func.isRequired,\n  recordKey: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default EditableText;\n","import { DeleteIcon } from '@chakra-ui/icons';\nimport {\n  Button,\n  Table,\n  TableCaption,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@chakra-ui/react';\nimport api from 'api';\nimport PropTypes from 'prop-types';\nimport { useMutation, useQueryClient } from 'react-query';\nimport EditableText from './EditableText';\n\nfunction RecordsTable({ records }) {\n  const updateRecord = useMutation(({ payload, id }) =>\n    api.update(payload, id)\n  );\n\n  const deleteRecord = useMutation(id => api.delete(id));\n\n  const queryClient = useQueryClient();\n\n  function handleUpdate(event) {\n    const updatedRecord = {\n      ...records.find(\n        ({ id }) =>\n          id ===\n          // Make sure to check as a number!\n          Number(event.target.dataset.id)\n      ),\n      ...{ [event.target.dataset.key]: event.target.value },\n    };\n\n    updateRecord.mutate({\n      payload: updatedRecord,\n      id: event.target.dataset.id,\n    });\n  }\n\n  function handleDelete(event) {\n    console.log('Gonna delete the record with id ' + event.target.dataset.id);\n    deleteRecord.mutate(event.target.dataset.id, {\n      onSuccess: async () => {\n        console.log('OK');\n        queryClient.invalidateQueries('records');\n      },\n    });\n  }\n\n  return (\n    <Table variant=\"simple\">\n      <TableCaption>Click on any data to edit üìù it.</TableCaption>\n      <Thead>\n        <Tr>\n          <Th>Artist</Th>\n          <Th>Album</Th>\n          <Th>Year</Th>\n          <Th></Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {records.map(({ id, artist, album, year }) => (\n          <Tr key={id} data-id={id}>\n            <Td>\n              <EditableText\n                value={artist}\n                handler={handleUpdate}\n                recordKey=\"artist\"\n                id={id}\n              />\n            </Td>\n            <Td>\n              <EditableText\n                value={album}\n                handler={handleUpdate}\n                recordKey=\"album\"\n                id={id}\n              />\n            </Td>\n            <Td>\n              <EditableText\n                value={year}\n                handler={handleUpdate}\n                recordKey=\"year\"\n                id={id}\n              />\n            </Td>\n            <Td>\n              <Button\n                leftIcon={<DeleteIcon />}\n                colorScheme=\"teal\"\n                variant=\"solid\"\n                size=\"xs\"\n                onClick={handleDelete}\n                data-id={id}\n              >\n                Delete üî•\n              </Button>\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n}\n\nRecordsTable.propTypes = {\n  records: PropTypes.arrayOf(\n    PropTypes.exact({\n      artist: PropTypes.string.isRequired,\n      album: PropTypes.string.isRequired,\n      year: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default RecordsTable;\n","import { Text } from '@chakra-ui/react';\nimport api from 'api';\nimport Form from 'components/RecordsForm';\nimport Table from 'components/RecordsTable';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\n\nconst fetchRecords = async () => await api.index();\n\nfunction Records() {\n  const { status, data, error } = useQuery('records', fetchRecords);\n\n  const addRecord = useMutation(payload => api.create(payload));\n\n  const queryClient = useQueryClient();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    addRecord.mutate(Object.fromEntries(new FormData(event.target)), {\n      onSuccess: () => {\n        queryClient.invalidateQueries('records');\n      },\n    });\n  };\n\n  switch (status) {\n    case 'loading':\n      return <Text>Loading...</Text>;\n    case 'error':\n      return <Text color=\"tomato\">{error.message}</Text>;\n    default:\n      return (\n        <main className=\"container mx-auto\">\n          <Table records={data} />\n          <Form handler={handleSubmit} />\n        </main>\n      );\n  }\n}\n\nexport default Records;\n","import { ChakraProvider, theme } from '@chakra-ui/react';\nimport { Footer, Header } from 'components';\nimport { HomePage } from 'pages';\nimport React from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\nimport './index.css';\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <QueryClientProvider client={queryClient}>\n        <Header />\n        <HomePage />\n        <Footer />\n        <ReactQueryDevtools initialIsOpen={false} />\n      </QueryClientProvider>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}